2025-01-22 13:26:40.986 +06:00 [INF] Now listening on: https://localhost:5050
2025-01-22 13:26:41.022 +06:00 [INF] Now listening on: http://localhost:5000
2025-01-22 13:26:41.036 +06:00 [INF] No action descriptors found. This may indicate an incorrectly configured application or missing application parts. To learn more, visit https://aka.ms/aspnet/mvc/app-parts
2025-01-22 13:26:41.219 +06:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 13:26:41.219 +06:00 [INF] Hosting environment: Development
2025-01-22 13:26:41.219 +06:00 [INF] Content root path: D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi
2025-01-22 13:26:41.736 +06:00 [INF] Request starting HTTP/2 GET https://localhost:5050/ - null null
2025-01-22 13:26:41.860 +06:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 13:26:41.864 +06:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 13:26:41.867 +06:00 [INF] Request finished HTTP/2 GET https://localhost:5050/ - 200 null text/plain; charset=utf-8 141.2925ms
2025-01-22 13:26:47.332 +06:00 [INF] Request starting HTTP/1.1 GET https://localhost:5050/products - null null
2025-01-22 13:26:47.333 +06:00 [INF] Executing endpoint 'HTTP: GET /products'
2025-01-22 13:26:50.670 +06:00 [INF] GetProductsQueryHandler.Handle called with {"$type":"GetProductsQuery"}
2025-01-22 13:26:54.129 +06:00 [INF] Batch execution completed (duration=49ms): ["\nSELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-22 13:26:54.204 +06:00 [INF] Batch execution completed (duration=44ms): ["\nselect column_name, data_type, character_maximum_length, udt_name\nfrom information_schema.columns where table_schema = $1 and table_name = $2\norder by ordinal_position","select kcu.column_name as key_column\nfrom information_schema.table_constraints tco\n         join information_schema.key_column_usage kcu\n              on kcu.constraint_name = tco.constraint_name\n                  and kcu.constraint_schema = tco.constraint_schema\n                  and kcu.constraint_name = tco.constraint_name\nwhere tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2\norder by kcu.ordinal_position","SELECT *\nFROM (\n    SELECT\n      R.rolname                AS user_name,\n      ns.nspname               AS schema_name,\n      pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,\n      i.relname                AS index_name,\n      pg_get_indexdef(i.oid) as ddl,\n      idx.indisunique          AS is_unique,\n      idx.indisprimary         AS is_primary,\n      am.amname                AS index_type,\n      idx.indkey,\n           ARRAY(\n               SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)\n               FROM\n                 generate_subscripts(idx.indkey, 1) AS k\n               ORDER BY k\n           ) AS index_keys,\n      (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,\n      idx.indpred IS NOT NULL AS is_partial\n    FROM pg_index AS idx\n      JOIN pg_class AS i\n        ON i.oid = idx.indexrelid\n      JOIN pg_am AS am\n        ON i.relam = am.oid\n      JOIN pg_namespace AS NS ON i.relnamespace = NS.OID\n      JOIN pg_roles AS R ON i.relowner = r.oid\n    WHERE\n      nspname = $1 AND\n      NOT nspname LIKE 'pg%'\n) ind\nWHERE\n      ind.table_name = $2 OR\n      ind.table_name = $3","SELECT c.conname                                     AS constraint_name,\n       c.contype                                     AS constraint_type,\n       sch.nspname                                   AS schema_name,\n       tbl.relname                                   AS table_name,\n       ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,\n       pg_get_constraintdef(c.oid)                   AS definition\nFROM pg_constraint c\n       JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE\n       JOIN pg_class tbl ON tbl.oid = c.conrelid\n       JOIN pg_namespace sch ON sch.oid = tbl.relnamespace\n       JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)\nWHERE\n\tc.contype = 'f' and\n\tsch.nspname = $1 and\n\ttbl.relname = $2\nGROUP BY constraint_name, constraint_type, schema_name, table_name, definition","SHOW max_identifier_length","select\n    col.column_name,\n    partition_strategy\nfrom\n    (select\n         partrelid,\n         partnatts,\n         case partstrat\n             when 'l' then 'list'\n             when 'h' then 'hash'\n             when 'r' then 'range' end as partition_strategy,\n         unnest(partattrs) column_index\n     from\n         pg_partitioned_table) pt\n        join\n    pg_class par\n    on\n            par.oid = pt.partrelid\n        join\n    information_schema.columns col\n    on\n                col.table_schema = par.relnamespace::regnamespace::text\n            and col.table_name = par.relname\n            and ordinal_position = pt.column_index\nwhere\n    col.table_schema = $1 and table_name = $2\norder by column_index","select pt.relname as partition_name,\n          pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression\n   from pg_class base_tb\n            join pg_inherits i on i.inhparent = base_tb.oid\n            join pg_class pt on pt.oid = i.inhrelid\n   where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-22 13:26:54.377 +06:00 [INF] Command execution completed (duration=147ms): select d.id, d.data from public.mt_doc_product as d
2025-01-22 13:26:54.500 +06:00 [INF] Setting HTTP status code 200.
2025-01-22 13:26:54.509 +06:00 [INF] Writing value of type 'GetProductsResponse' as Json.
2025-01-22 13:26:54.531 +06:00 [INF] Executed endpoint 'HTTP: GET /products'
2025-01-22 13:26:54.535 +06:00 [INF] Request finished HTTP/1.1 GET https://localhost:5050/products - 200 null application/json; charset=utf-8 7203.062ms
2025-01-22 13:33:13.543 +06:00 [INF] Now listening on: https://localhost:5050
2025-01-22 13:33:13.584 +06:00 [INF] Now listening on: http://localhost:5000
2025-01-22 13:33:13.598 +06:00 [INF] No action descriptors found. This may indicate an incorrectly configured application or missing application parts. To learn more, visit https://aka.ms/aspnet/mvc/app-parts
2025-01-22 13:33:13.785 +06:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 13:33:13.786 +06:00 [INF] Hosting environment: Development
2025-01-22 13:33:13.786 +06:00 [INF] Content root path: D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi
2025-01-22 13:33:13.960 +06:00 [INF] Request starting HTTP/2 GET https://localhost:5050/ - null null
2025-01-22 13:33:14.110 +06:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 13:33:14.114 +06:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 13:33:14.117 +06:00 [INF] Request finished HTTP/2 GET https://localhost:5050/ - 200 null text/plain; charset=utf-8 164.9368ms
2025-01-22 13:33:17.391 +06:00 [INF] Request starting HTTP/1.1 GET https://localhost:5050/products - null null
2025-01-22 13:33:17.392 +06:00 [INF] Executing endpoint 'HTTP: GET /products'
2025-01-22 13:33:19.777 +06:00 [INF] GetProductsQueryHandler.Handle called with {"$type":"GetProductsQuery"}
2025-01-22 13:33:24.121 +06:00 [INF] Batch execution completed (duration=68ms): ["\nSELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-22 13:33:24.229 +06:00 [INF] Batch execution completed (duration=68ms): ["\nselect column_name, data_type, character_maximum_length, udt_name\nfrom information_schema.columns where table_schema = $1 and table_name = $2\norder by ordinal_position","select kcu.column_name as key_column\nfrom information_schema.table_constraints tco\n         join information_schema.key_column_usage kcu\n              on kcu.constraint_name = tco.constraint_name\n                  and kcu.constraint_schema = tco.constraint_schema\n                  and kcu.constraint_name = tco.constraint_name\nwhere tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2\norder by kcu.ordinal_position","SELECT *\nFROM (\n    SELECT\n      R.rolname                AS user_name,\n      ns.nspname               AS schema_name,\n      pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,\n      i.relname                AS index_name,\n      pg_get_indexdef(i.oid) as ddl,\n      idx.indisunique          AS is_unique,\n      idx.indisprimary         AS is_primary,\n      am.amname                AS index_type,\n      idx.indkey,\n           ARRAY(\n               SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)\n               FROM\n                 generate_subscripts(idx.indkey, 1) AS k\n               ORDER BY k\n           ) AS index_keys,\n      (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,\n      idx.indpred IS NOT NULL AS is_partial\n    FROM pg_index AS idx\n      JOIN pg_class AS i\n        ON i.oid = idx.indexrelid\n      JOIN pg_am AS am\n        ON i.relam = am.oid\n      JOIN pg_namespace AS NS ON i.relnamespace = NS.OID\n      JOIN pg_roles AS R ON i.relowner = r.oid\n    WHERE\n      nspname = $1 AND\n      NOT nspname LIKE 'pg%'\n) ind\nWHERE\n      ind.table_name = $2 OR\n      ind.table_name = $3","SELECT c.conname                                     AS constraint_name,\n       c.contype                                     AS constraint_type,\n       sch.nspname                                   AS schema_name,\n       tbl.relname                                   AS table_name,\n       ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,\n       pg_get_constraintdef(c.oid)                   AS definition\nFROM pg_constraint c\n       JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE\n       JOIN pg_class tbl ON tbl.oid = c.conrelid\n       JOIN pg_namespace sch ON sch.oid = tbl.relnamespace\n       JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)\nWHERE\n\tc.contype = 'f' and\n\tsch.nspname = $1 and\n\ttbl.relname = $2\nGROUP BY constraint_name, constraint_type, schema_name, table_name, definition","SHOW max_identifier_length","select\n    col.column_name,\n    partition_strategy\nfrom\n    (select\n         partrelid,\n         partnatts,\n         case partstrat\n             when 'l' then 'list'\n             when 'h' then 'hash'\n             when 'r' then 'range' end as partition_strategy,\n         unnest(partattrs) column_index\n     from\n         pg_partitioned_table) pt\n        join\n    pg_class par\n    on\n            par.oid = pt.partrelid\n        join\n    information_schema.columns col\n    on\n                col.table_schema = par.relnamespace::regnamespace::text\n            and col.table_name = par.relname\n            and ordinal_position = pt.column_index\nwhere\n    col.table_schema = $1 and table_name = $2\norder by column_index","select pt.relname as partition_name,\n          pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression\n   from pg_class base_tb\n            join pg_inherits i on i.inhparent = base_tb.oid\n            join pg_class pt on pt.oid = i.inhrelid\n   where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-22 13:33:24.501 +06:00 [INF] Command execution completed (duration=228ms): select d.id, d.data from public.mt_doc_product as d
2025-01-22 13:33:24.661 +06:00 [INF] Setting HTTP status code 200.
2025-01-22 13:33:24.675 +06:00 [INF] Writing value of type 'GetProductsResponse' as Json.
2025-01-22 13:33:24.711 +06:00 [INF] Executed endpoint 'HTTP: GET /products'
2025-01-22 13:33:24.716 +06:00 [INF] Request finished HTTP/1.1 GET https://localhost:5050/products - 200 null application/json; charset=utf-8 7324.8402ms
2025-01-22 14:34:52.212 +06:00 [INF] Now listening on: https://localhost:5050
2025-01-22 14:34:52.309 +06:00 [INF] Now listening on: http://localhost:5000
2025-01-22 14:34:52.340 +06:00 [INF] No action descriptors found. This may indicate an incorrectly configured application or missing application parts. To learn more, visit https://aka.ms/aspnet/mvc/app-parts
2025-01-22 14:34:52.756 +06:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 14:34:52.757 +06:00 [INF] Hosting environment: Development
2025-01-22 14:34:52.770 +06:00 [INF] Content root path: D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi
2025-01-22 14:34:53.043 +06:00 [INF] Request starting HTTP/2 GET https://localhost:5050/ - null null
2025-01-22 14:34:53.275 +06:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 14:34:53.285 +06:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 14:34:53.292 +06:00 [INF] Request finished HTTP/2 GET https://localhost:5050/ - 200 null text/plain; charset=utf-8 267.4698ms
2025-01-22 14:34:57.237 +06:00 [INF] Request starting HTTP/1.1 GET https://localhost:5050/products - null null
2025-01-22 14:34:57.239 +06:00 [INF] Executing endpoint 'HTTP: GET /products'
2025-01-22 14:34:59.395 +06:00 [INF] GetProductsQueryHandler.Handle called with {"$type":"GetProductsQuery"}
2025-01-22 14:35:07.605 +06:00 [INF] Batch execution completed (duration=117ms): ["\nSELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-22 14:35:07.780 +06:00 [INF] Batch execution completed (duration=110ms): ["\nselect column_name, data_type, character_maximum_length, udt_name\nfrom information_schema.columns where table_schema = $1 and table_name = $2\norder by ordinal_position","select kcu.column_name as key_column\nfrom information_schema.table_constraints tco\n         join information_schema.key_column_usage kcu\n              on kcu.constraint_name = tco.constraint_name\n                  and kcu.constraint_schema = tco.constraint_schema\n                  and kcu.constraint_name = tco.constraint_name\nwhere tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2\norder by kcu.ordinal_position","SELECT *\nFROM (\n    SELECT\n      R.rolname                AS user_name,\n      ns.nspname               AS schema_name,\n      pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,\n      i.relname                AS index_name,\n      pg_get_indexdef(i.oid) as ddl,\n      idx.indisunique          AS is_unique,\n      idx.indisprimary         AS is_primary,\n      am.amname                AS index_type,\n      idx.indkey,\n           ARRAY(\n               SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)\n               FROM\n                 generate_subscripts(idx.indkey, 1) AS k\n               ORDER BY k\n           ) AS index_keys,\n      (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,\n      idx.indpred IS NOT NULL AS is_partial\n    FROM pg_index AS idx\n      JOIN pg_class AS i\n        ON i.oid = idx.indexrelid\n      JOIN pg_am AS am\n        ON i.relam = am.oid\n      JOIN pg_namespace AS NS ON i.relnamespace = NS.OID\n      JOIN pg_roles AS R ON i.relowner = r.oid\n    WHERE\n      nspname = $1 AND\n      NOT nspname LIKE 'pg%'\n) ind\nWHERE\n      ind.table_name = $2 OR\n      ind.table_name = $3","SELECT c.conname                                     AS constraint_name,\n       c.contype                                     AS constraint_type,\n       sch.nspname                                   AS schema_name,\n       tbl.relname                                   AS table_name,\n       ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,\n       pg_get_constraintdef(c.oid)                   AS definition\nFROM pg_constraint c\n       JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE\n       JOIN pg_class tbl ON tbl.oid = c.conrelid\n       JOIN pg_namespace sch ON sch.oid = tbl.relnamespace\n       JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)\nWHERE\n\tc.contype = 'f' and\n\tsch.nspname = $1 and\n\ttbl.relname = $2\nGROUP BY constraint_name, constraint_type, schema_name, table_name, definition","SHOW max_identifier_length","select\n    col.column_name,\n    partition_strategy\nfrom\n    (select\n         partrelid,\n         partnatts,\n         case partstrat\n             when 'l' then 'list'\n             when 'h' then 'hash'\n             when 'r' then 'range' end as partition_strategy,\n         unnest(partattrs) column_index\n     from\n         pg_partitioned_table) pt\n        join\n    pg_class par\n    on\n            par.oid = pt.partrelid\n        join\n    information_schema.columns col\n    on\n                col.table_schema = par.relnamespace::regnamespace::text\n            and col.table_name = par.relname\n            and ordinal_position = pt.column_index\nwhere\n    col.table_schema = $1 and table_name = $2\norder by column_index","select pt.relname as partition_name,\n          pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression\n   from pg_class base_tb\n            join pg_inherits i on i.inhparent = base_tb.oid\n            join pg_class pt on pt.oid = i.inhrelid\n   where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-22 14:35:08.157 +06:00 [INF] Command execution completed (duration=311ms): select d.id, d.data from public.mt_doc_product as d
2025-01-22 14:35:08.408 +06:00 [INF] Setting HTTP status code 200.
2025-01-22 14:35:08.431 +06:00 [INF] Writing value of type 'GetProductsResponse' as Json.
2025-01-22 14:35:08.486 +06:00 [INF] Executed endpoint 'HTTP: GET /products'
2025-01-22 14:35:08.495 +06:00 [INF] Request finished HTTP/1.1 GET https://localhost:5050/products - 200 null application/json; charset=utf-8 11258.2237ms
2025-01-22 17:19:33.213 +06:00 [INF] Now listening on: https://localhost:5050
2025-01-22 17:19:33.244 +06:00 [INF] Now listening on: http://localhost:5000
2025-01-22 17:19:33.263 +06:00 [INF] No action descriptors found. This may indicate an incorrectly configured application or missing application parts. To learn more, visit https://aka.ms/aspnet/mvc/app-parts
2025-01-22 17:19:33.514 +06:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 17:19:33.515 +06:00 [INF] Hosting environment: Development
2025-01-22 17:19:33.516 +06:00 [INF] Content root path: D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi
2025-01-22 11:21:10.142 +00:00 [INF] Now listening on: http://[::]:8080
2025-01-22 11:21:10.272 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 11:21:10.273 +00:00 [INF] Hosting environment: Production
2025-01-22 11:21:10.274 +00:00 [INF] Content root path: /app
2025-01-22 11:21:10.952 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/ - null null
2025-01-22 11:21:11.204 +00:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 11:21:11.216 +00:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 11:21:11.221 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/ - 200 null text/plain; charset=utf-8 269.7779ms
2025-01-22 11:21:11.354 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/favicon.ico - null null
2025-01-22 11:21:11.356 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/favicon.ico - 404 0 null 2.3313ms
2025-01-22 11:21:11.358 +00:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET http://localhost:8080/favicon.ico, Response status code: 404
2025-01-22 11:27:44.543 +00:00 [INF] Now listening on: http://[::]:8080
2025-01-22 11:27:44.636 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 11:27:44.637 +00:00 [INF] Hosting environment: Production
2025-01-22 11:27:44.637 +00:00 [INF] Content root path: /app
2025-01-22 11:28:41.451 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/products - application/json 269
2025-01-22 11:28:41.553 +00:00 [INF] Executing endpoint 'HTTP: GET /products'
2025-01-22 11:28:47.126 +00:00 [INF] GetProductsQueryHandler.Handle called with {"$type":"GetProductsQuery"}
2025-01-22 11:28:58.887 +00:00 [INF] Executed endpoint 'HTTP: GET /products'
2025-01-22 11:28:58.892 +00:00 [ERR] Connection id "0HN9QQVM5FEKN", Request id "0HN9QQVM5FEKN:00000001": An unhandled exception was thrown by the application.
System.Net.Sockets.SocketException (00000005, 0xFFFDFFFF): Name or service not known
   at System.Net.Dns.GetHostEntryOrAddressesCore(String hostName, Boolean justAddresses, AddressFamily addressFamily, Nullable`1 startingTimestamp)
   at System.Net.Dns.<>c.<GetHostEntryOrAddressesCoreAsync>b__33_0(Object s, Int64 startingTimestamp)
   at System.Net.Dns.<>c__DisplayClass39_0`1.<RunAsync>b__0(Task <p0>, Object <p1>)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke()
   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)
--- End of stack trace from previous location ---
   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)
--- End of stack trace from previous location ---
   at Npgsql.TaskTimeoutAndCancellation.ExecuteAsync(Func`2 getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.TaskTimeoutAndCancellation.ExecuteAsync[TResult](Func`2 getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.RawOpen(SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken, Boolean isFirstAttempt)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|213_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken, Boolean isFirstAttempt)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Weasel.Core.Migrations.DatabaseBase`1.executeMigration(ISchemaObject[] schemaObjects, CancellationToken ct)
   at Weasel.Core.Migrations.DatabaseBase`1.executeMigration(ISchemaObject[] schemaObjects, CancellationToken ct)
   at Weasel.Core.Migrations.DatabaseBase`1.generateOrUpdateFeature(Type featureType, IFeatureSchema feature, CancellationToken token, Boolean skipPostProcessing)
   at Weasel.Core.Migrations.DatabaseBase`1.ensureStorageExistsAsync(IList`1 types, Type featureType, CancellationToken token)
   at Weasel.Core.Migrations.DatabaseBase`1.ensureStorageExistsAsync(IList`1 types, Type featureType, CancellationToken token)
   at Marten.Linq.MartenLinqQueryProvider.EnsureStorageExistsAsync(LinqQueryParser parser, CancellationToken cancellationToken)
   at Marten.Linq.MartenLinqQueryable`1.ToListAsync[TResult](CancellationToken token)
   at CatalogApi.Products.GetProduct.GetProductsQueryHandler.Handle(GetProductsQuery query, CancellationToken cancellationToken) in D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi\Products\GetProduct\GetProductHandler.cs:line 14
   at CatalogApi.Products.GetProduct.GetProductEndpoint.<>c.<<AddRoutes>b__0_0>d.MoveNext() in D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi\Products\GetProduct\GetProductEndpoint.cs:line 14
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2025-01-22 11:28:58.912 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/products - 500 0 null 17461.8328ms
2025-01-22 11:32:42.138 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/ - null null
2025-01-22 11:32:42.142 +00:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 11:32:42.150 +00:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 11:32:42.152 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/ - 200 null text/plain; charset=utf-8 16.7951ms
2025-01-22 11:34:56.086 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'https://+:8081;http://+:8080'.
2025-01-22 11:34:56.205 +00:00 [ERR] Hosting failed to start
System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found or is out of date.
To generate a developer certificate run 'dotnet dev-certs https'. To trust the certificate (Windows and macOS only) run 'dotnet dev-certs https --trust'.
For more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.
   at Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(ListenOptions listenOptions, Action`1 configureOptions)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.AddressesStrategy.BindAsync(AddressBindContext context, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(ListenOptions[] listenOptions, AddressBindContext context, Func`2 useHttps, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.BindAsync(CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.<StartAsync>b__15_1(IHostedService service, CancellationToken token)
   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)
2025-01-22 12:55:26.248 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'https://+:8081;http://+:8080'.
2025-01-22 12:55:26.402 +00:00 [ERR] Hosting failed to start
System.IO.DirectoryNotFoundException: Could not find a part of the path '/app/ "/app/certificates/aspnetapp.pfx"'.
   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64& fileLength, UnixFileMode& filePermissions, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)
   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)
   at System.IO.File.ReadAllText(String path, Encoding encoding)
   at System.Security.Cryptography.X509Certificates.X509Certificate2Collection.ImportFromPemFile(String certPemFilePath)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Certificates.CertificateConfigLoader.LoadCertificate(CertificateConfig certInfo, String endpointName)
   at Microsoft.AspNetCore.Server.Kestrel.Core.TlsConfigurationLoader.LoadDefaultCertificate(ConfigurationReader configurationReader)
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.Reload()
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.LoadInternal()
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.BindAsync(CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.<StartAsync>b__15_1(IHostedService service, CancellationToken token)
   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)
2025-01-22 12:58:30.057 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'https://+:8081;http://+:8080'.
2025-01-22 12:58:30.191 +00:00 [ERR] Hosting failed to start
System.IO.DirectoryNotFoundException: Could not find a part of the path '/app/ "/app/certificates/aspnetapp.pfx"'.
   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64& fileLength, UnixFileMode& filePermissions, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)
   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)
   at System.IO.File.ReadAllText(String path, Encoding encoding)
   at System.Security.Cryptography.X509Certificates.X509Certificate2Collection.ImportFromPemFile(String certPemFilePath)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Certificates.CertificateConfigLoader.LoadCertificate(CertificateConfig certInfo, String endpointName)
   at Microsoft.AspNetCore.Server.Kestrel.Core.TlsConfigurationLoader.LoadDefaultCertificate(ConfigurationReader configurationReader)
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.Reload()
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.LoadInternal()
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.BindAsync(CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.<StartAsync>b__15_1(IHostedService service, CancellationToken token)
   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)
2025-01-22 13:06:18.833 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'https://+:8081;http://+:8080'.
2025-01-22 13:06:18.918 +00:00 [ERR] Hosting failed to start
System.IO.DirectoryNotFoundException: Could not find a part of the path '/app/ "/app/certificates/aspnetapp.pfx"'.
   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64& fileLength, UnixFileMode& filePermissions, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)
   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)
   at System.IO.File.ReadAllText(String path, Encoding encoding)
   at System.Security.Cryptography.X509Certificates.X509Certificate2Collection.ImportFromPemFile(String certPemFilePath)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Certificates.CertificateConfigLoader.LoadCertificate(CertificateConfig certInfo, String endpointName)
   at Microsoft.AspNetCore.Server.Kestrel.Core.TlsConfigurationLoader.LoadDefaultCertificate(ConfigurationReader configurationReader)
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.Reload()
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.LoadInternal()
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.BindAsync(CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.<StartAsync>b__15_1(IHostedService service, CancellationToken token)
   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)
2025-01-22 13:10:03.905 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead 'https://+:8081;http://+:8080'.
2025-01-22 13:10:04.027 +00:00 [ERR] Hosting failed to start
System.IO.DirectoryNotFoundException: Could not find a part of the path '/app/ /app/certificates/aspnetapp.pfx'.
   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64& fileLength, UnixFileMode& filePermissions, Boolean failForSymlink, Boolean& wasSymlink, Func`4 createOpenException)
   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)
   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)
   at System.IO.File.ReadAllText(String path, Encoding encoding)
   at System.Security.Cryptography.X509Certificates.X509Certificate2Collection.ImportFromPemFile(String certPemFilePath)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Certificates.CertificateConfigLoader.LoadCertificate(CertificateConfig certInfo, String endpointName)
   at Microsoft.AspNetCore.Server.Kestrel.Core.TlsConfigurationLoader.LoadDefaultCertificate(ConfigurationReader configurationReader)
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.Reload()
   at Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader.LoadInternal()
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.BindAsync(CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
   at Microsoft.Extensions.Hosting.Internal.Host.<StartAsync>b__15_1(IHostedService service, CancellationToken token)
   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable`1 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List`1 exceptions, Func`3 operation)
2025-01-22 13:49:41.717 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-22 13:49:41.780 +00:00 [WRN] Overriding address(es) 'http://*:8080'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-22 13:49:41.975 +00:00 [INF] Now listening on: http://0.0.0.0:80
2025-01-22 13:49:41.976 +00:00 [INF] Now listening on: https://0.0.0.0:443
2025-01-22 13:49:41.977 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 13:49:41.978 +00:00 [INF] Hosting environment: Production
2025-01-22 13:49:41.978 +00:00 [INF] Content root path: /app
2025-01-22 13:50:33.223 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-22 13:50:33.281 +00:00 [WRN] Overriding address(es) 'http://*:8080'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-22 13:50:33.398 +00:00 [INF] Now listening on: http://0.0.0.0:8080
2025-01-22 13:50:33.399 +00:00 [INF] Now listening on: https://0.0.0.0:8081
2025-01-22 13:50:33.400 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 13:50:33.401 +00:00 [INF] Hosting environment: Production
2025-01-22 13:50:33.401 +00:00 [INF] Content root path: /app
2025-01-22 13:55:04.007 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-22 13:55:04.076 +00:00 [WRN] Overriding address(es) 'http://*:8080'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-22 13:55:04.205 +00:00 [INF] Now listening on: http://0.0.0.0:8080
2025-01-22 13:55:04.206 +00:00 [INF] Now listening on: https://0.0.0.0:8081
2025-01-22 13:55:04.207 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 13:55:04.207 +00:00 [INF] Hosting environment: Production
2025-01-22 13:55:04.207 +00:00 [INF] Content root path: /app
2025-01-22 13:55:19.843 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/ - null null
2025-01-22 13:55:19.959 +00:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 13:55:19.972 +00:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 13:55:19.974 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/ - 200 null text/plain; charset=utf-8 135.3666ms
2025-01-22 13:55:19.997 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/favicon.ico - null null
2025-01-22 13:55:19.999 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/favicon.ico - 404 0 null 1.7089ms
2025-01-22 13:55:20.001 +00:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET http://localhost:8080/favicon.ico, Response status code: 404
2025-01-22 13:55:30.743 +00:00 [INF] Request starting HTTP/1.1 GET https://localhost:8081/products - application/json 269
2025-01-22 13:55:30.744 +00:00 [INF] Executing endpoint 'HTTP: GET /products'
2025-01-22 13:55:32.961 +00:00 [INF] GetProductsQueryHandler.Handle called with {"$type":"GetProductsQuery"}
2025-01-22 13:55:35.821 +00:00 [INF] Executed endpoint 'HTTP: GET /products'
2025-01-22 13:55:35.825 +00:00 [ERR] Connection id "0HN9QTHK9BED4", Request id "0HN9QTHK9BED4:00000001": An unhandled exception was thrown by the application.
Npgsql.NpgsqlException (0x80004005): Failed to connect to 127.0.0.1:2345
 ---> System.Net.Sockets.SocketException (111): Connection refused
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)
   at Npgsql.TaskTimeoutAndCancellation.ExecuteAsync(Func`2 getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.RawOpen(SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken, Boolean isFirstAttempt)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|213_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken, Boolean isFirstAttempt)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Weasel.Core.Migrations.DatabaseBase`1.executeMigration(ISchemaObject[] schemaObjects, CancellationToken ct)
   at Weasel.Core.Migrations.DatabaseBase`1.executeMigration(ISchemaObject[] schemaObjects, CancellationToken ct)
   at Weasel.Core.Migrations.DatabaseBase`1.generateOrUpdateFeature(Type featureType, IFeatureSchema feature, CancellationToken token, Boolean skipPostProcessing)
   at Weasel.Core.Migrations.DatabaseBase`1.ensureStorageExistsAsync(IList`1 types, Type featureType, CancellationToken token)
   at Weasel.Core.Migrations.DatabaseBase`1.ensureStorageExistsAsync(IList`1 types, Type featureType, CancellationToken token)
   at Marten.Linq.MartenLinqQueryProvider.EnsureStorageExistsAsync(LinqQueryParser parser, CancellationToken cancellationToken)
   at Marten.Linq.MartenLinqQueryable`1.ToListAsync[TResult](CancellationToken token)
   at CatalogApi.Products.GetProduct.GetProductsQueryHandler.Handle(GetProductsQuery query, CancellationToken cancellationToken) in D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi\Products\GetProduct\GetProductHandler.cs:line 14
   at CatalogApi.Products.GetProduct.GetProductEndpoint.<>c.<<AddRoutes>b__0_0>d.MoveNext() in D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi\Products\GetProduct\GetProductEndpoint.cs:line 14
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2025-01-22 13:55:35.844 +00:00 [INF] Request finished HTTP/1.1 GET https://localhost:8081/products - 500 0 null 5101.4687ms
2025-01-22 13:57:39.106 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-22 13:57:39.170 +00:00 [WRN] Overriding address(es) 'http://*:8080'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-22 13:57:39.275 +00:00 [INF] Now listening on: https://0.0.0.0:8081
2025-01-22 13:57:39.277 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 13:57:39.277 +00:00 [INF] Hosting environment: Production
2025-01-22 13:57:39.278 +00:00 [INF] Content root path: /app
2025-01-22 13:58:18.300 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-22 13:58:18.367 +00:00 [WRN] Overriding address(es) 'http://*:8080'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-22 13:58:18.491 +00:00 [INF] Now listening on: http://0.0.0.0:8080
2025-01-22 13:58:18.492 +00:00 [INF] Now listening on: https://0.0.0.0:8081
2025-01-22 13:58:18.493 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 13:58:18.493 +00:00 [INF] Hosting environment: Production
2025-01-22 13:58:18.494 +00:00 [INF] Content root path: /app
2025-01-22 13:58:59.780 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/ - null null
2025-01-22 13:58:59.894 +00:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 13:58:59.906 +00:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 13:58:59.908 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/ - 200 null text/plain; charset=utf-8 130.2316ms
2025-01-22 13:59:02.880 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:8080/ - null null
2025-01-22 13:59:02.880 +00:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-22 13:59:02.881 +00:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-22 13:59:02.882 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:8080/ - 200 null text/plain; charset=utf-8 2.5785ms
2025-01-22 14:00:55.414 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead ' "https://+:8081;http://+:8080"'.
2025-01-22 14:00:55.523 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-22 14:00:55.535 +00:00 [WRN] Overriding address(es) ' "https://+:8081, http://+:8080"'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-22 14:00:55.695 +00:00 [INF] Now listening on: http://0.0.0.0:8080
2025-01-22 14:00:55.696 +00:00 [INF] Now listening on: https://0.0.0.0:8081
2025-01-22 14:00:55.696 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-22 14:00:55.697 +00:00 [INF] Hosting environment: Production
2025-01-22 14:00:55.697 +00:00 [INF] Content root path: /app
2025-01-22 14:02:03.296 +00:00 [INF] Request starting HTTP/1.1 GET https://0.0.0.0:8081/products - application/json 269
2025-01-22 14:02:03.415 +00:00 [INF] Executing endpoint 'HTTP: GET /products'
2025-01-22 14:02:08.673 +00:00 [INF] GetProductsQueryHandler.Handle called with {"$type":"GetProductsQuery"}
2025-01-22 14:02:12.040 +00:00 [INF] Executed endpoint 'HTTP: GET /products'
2025-01-22 14:02:12.044 +00:00 [ERR] Connection id "0HN9QTLCGRTQV", Request id "0HN9QTLCGRTQV:00000001": An unhandled exception was thrown by the application.
Npgsql.NpgsqlException (0x80004005): Failed to connect to 127.0.0.1:2345
 ---> System.Net.Sockets.SocketException (111): Connection refused
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)
   at Npgsql.TaskTimeoutAndCancellation.ExecuteAsync(Func`2 getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.RawOpen(SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken, Boolean isFirstAttempt)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|213_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken, Boolean isFirstAttempt)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Weasel.Core.Migrations.DatabaseBase`1.executeMigration(ISchemaObject[] schemaObjects, CancellationToken ct)
   at Weasel.Core.Migrations.DatabaseBase`1.executeMigration(ISchemaObject[] schemaObjects, CancellationToken ct)
   at Weasel.Core.Migrations.DatabaseBase`1.generateOrUpdateFeature(Type featureType, IFeatureSchema feature, CancellationToken token, Boolean skipPostProcessing)
   at Weasel.Core.Migrations.DatabaseBase`1.ensureStorageExistsAsync(IList`1 types, Type featureType, CancellationToken token)
   at Weasel.Core.Migrations.DatabaseBase`1.ensureStorageExistsAsync(IList`1 types, Type featureType, CancellationToken token)
   at Marten.Linq.MartenLinqQueryProvider.EnsureStorageExistsAsync(LinqQueryParser parser, CancellationToken cancellationToken)
   at Marten.Linq.MartenLinqQueryable`1.ToListAsync[TResult](CancellationToken token)
   at CatalogApi.Products.GetProduct.GetProductsQueryHandler.Handle(GetProductsQuery query, CancellationToken cancellationToken) in D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi\Products\GetProduct\GetProductHandler.cs:line 14
   at CatalogApi.Products.GetProduct.GetProductEndpoint.<>c.<<AddRoutes>b__0_0>d.MoveNext() in D:\projects_all\TestProjects\.net-core8_Microservices\core8-microservices\src\Services\Catalog\CatalogApi\Products\GetProduct\GetProductEndpoint.cs:line 14
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task`1 task, HttpContext httpContext)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2025-01-22 14:02:12.069 +00:00 [INF] Request finished HTTP/1.1 GET https://0.0.0.0:8081/products - 500 0 null 8775.5865ms
