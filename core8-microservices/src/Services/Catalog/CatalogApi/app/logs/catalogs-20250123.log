2025-01-23 09:38:30.430 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead '"https://+:9999;http://+:9998"'.
2025-01-23 09:38:30.546 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-23 09:38:30.558 +00:00 [WRN] Overriding address(es) '"https://+:9999, http://+:9998"'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-23 09:38:30.845 +00:00 [INF] Now listening on: http://0.0.0.0:8080
2025-01-23 09:38:30.847 +00:00 [INF] Now listening on: https://0.0.0.0:8081
2025-01-23 09:38:30.848 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-23 09:38:30.849 +00:00 [INF] Hosting environment: Production
2025-01-23 09:38:30.849 +00:00 [INF] Content root path: /app
2025-01-23 09:38:44.455 +00:00 [INF] Request starting HTTP/2 GET https://localhost:9999/ - null null
2025-01-23 09:38:44.563 +00:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-23 09:38:44.566 +00:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-23 09:38:44.568 +00:00 [INF] Request finished HTTP/2 GET https://localhost:9999/ - 200 null text/plain; charset=utf-8 113.6533ms
2025-01-23 09:38:49.028 +00:00 [INF] Request starting HTTP/2 GET https://localhost:9999/products - null null
2025-01-23 09:38:49.029 +00:00 [INF] Executing endpoint 'HTTP: GET /products'
2025-01-23 09:38:49.235 +00:00 [INF] GetProductsQueryHandler.Handle called with {"$type":"GetProductsQuery"}
2025-01-23 09:38:52.042 +00:00 [INF] Batch execution completed (duration=49ms): ["\nSELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-23 09:38:52.114 +00:00 [INF] Batch execution completed (duration=46ms): ["\nselect column_name, data_type, character_maximum_length, udt_name\nfrom information_schema.columns where table_schema = $1 and table_name = $2\norder by ordinal_position","select kcu.column_name as key_column\nfrom information_schema.table_constraints tco\n         join information_schema.key_column_usage kcu\n              on kcu.constraint_name = tco.constraint_name\n                  and kcu.constraint_schema = tco.constraint_schema\n                  and kcu.constraint_name = tco.constraint_name\nwhere tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2\norder by kcu.ordinal_position","SELECT *\nFROM (\n    SELECT\n      R.rolname                AS user_name,\n      ns.nspname               AS schema_name,\n      pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,\n      i.relname                AS index_name,\n      pg_get_indexdef(i.oid) as ddl,\n      idx.indisunique          AS is_unique,\n      idx.indisprimary         AS is_primary,\n      am.amname                AS index_type,\n      idx.indkey,\n           ARRAY(\n               SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)\n               FROM\n                 generate_subscripts(idx.indkey, 1) AS k\n               ORDER BY k\n           ) AS index_keys,\n      (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,\n      idx.indpred IS NOT NULL AS is_partial\n    FROM pg_index AS idx\n      JOIN pg_class AS i\n        ON i.oid = idx.indexrelid\n      JOIN pg_am AS am\n        ON i.relam = am.oid\n      JOIN pg_namespace AS NS ON i.relnamespace = NS.OID\n      JOIN pg_roles AS R ON i.relowner = r.oid\n    WHERE\n      nspname = $1 AND\n      NOT nspname LIKE 'pg%'\n) ind\nWHERE\n      ind.table_name = $2 OR\n      ind.table_name = $3","SELECT c.conname                                     AS constraint_name,\n       c.contype                                     AS constraint_type,\n       sch.nspname                                   AS schema_name,\n       tbl.relname                                   AS table_name,\n       ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,\n       pg_get_constraintdef(c.oid)                   AS definition\nFROM pg_constraint c\n       JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE\n       JOIN pg_class tbl ON tbl.oid = c.conrelid\n       JOIN pg_namespace sch ON sch.oid = tbl.relnamespace\n       JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)\nWHERE\n\tc.contype = 'f' and\n\tsch.nspname = $1 and\n\ttbl.relname = $2\nGROUP BY constraint_name, constraint_type, schema_name, table_name, definition","SHOW max_identifier_length","select\n    col.column_name,\n    partition_strategy\nfrom\n    (select\n         partrelid,\n         partnatts,\n         case partstrat\n             when 'l' then 'list'\n             when 'h' then 'hash'\n             when 'r' then 'range' end as partition_strategy,\n         unnest(partattrs) column_index\n     from\n         pg_partitioned_table) pt\n        join\n    pg_class par\n    on\n            par.oid = pt.partrelid\n        join\n    information_schema.columns col\n    on\n                col.table_schema = par.relnamespace::regnamespace::text\n            and col.table_name = par.relname\n            and ordinal_position = pt.column_index\nwhere\n    col.table_schema = $1 and table_name = $2\norder by column_index","select pt.relname as partition_name,\n          pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression\n   from pg_class base_tb\n            join pg_inherits i on i.inhparent = base_tb.oid\n            join pg_class pt on pt.oid = i.inhrelid\n   where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-23 09:38:52.277 +00:00 [INF] Command execution completed (duration=139ms): select d.id, d.data from public.mt_doc_product as d
2025-01-23 09:38:52.359 +00:00 [INF] Setting HTTP status code 200.
2025-01-23 09:38:52.371 +00:00 [INF] Writing value of type 'GetProductsResponse' as Json.
2025-01-23 09:38:52.408 +00:00 [INF] Executed endpoint 'HTTP: GET /products'
2025-01-23 09:38:52.415 +00:00 [INF] Request finished HTTP/2 GET https://localhost:9999/products - 200 null application/json; charset=utf-8 3387.2443ms
2025-01-23 09:40:27.072 +00:00 [INF] Request starting HTTP/1.1 POST https://localhost:9999/products - application/json 270
2025-01-23 09:40:27.072 +00:00 [INF] Executing endpoint 'HTTP: POST /products'
2025-01-23 09:40:27.100 +00:00 [INF] CreateProduct start.Handle called with {"Name":"Poduct nothing","Category":["h1","h2"],"Description":" this test product from hello","ImageFile":"Hello.png","Price":9999,"$type":"CreateProductCommand"}
2025-01-23 09:40:31.850 +00:00 [INF] Start
2025-01-23 09:40:31.944 +00:00 [INF] Command execution completed (duration=24ms): select public.mt_upsert_product($1,$2,$3,$4)
2025-01-23 09:40:31.957 +00:00 [INF] ENd {"Id":"01949288-e20a-4677-a1a3-7f5e807a8fad","Name":"Poduct nothing","Category":["h1","h2"],"Description":" this test product from hello","ImageFile":"Hello.png","Price":9999,"$type":"Product"}
2025-01-23 09:40:31.958 +00:00 [INF] CreateProduct end.Handle called with {"Id":"01949288-e20a-4677-a1a3-7f5e807a8fad","$type":"CreateProductResult"}
2025-01-23 09:40:31.960 +00:00 [INF] Setting HTTP status code 201.
2025-01-23 09:40:31.962 +00:00 [INF] Writing value of type 'CreateProductResponse' as Json.
2025-01-23 09:40:31.965 +00:00 [INF] Executed endpoint 'HTTP: POST /products'
2025-01-23 09:40:31.966 +00:00 [INF] Request finished HTTP/1.1 POST https://localhost:9999/products - 201 null application/json; charset=utf-8 4894.0955ms
2025-01-23 09:43:25.465 +00:00 [INF] Request starting HTTP/1.1 GET http://localhost:9998/ - null null
2025-01-23 09:43:25.466 +00:00 [INF] Executing endpoint 'HTTP: GET /'
2025-01-23 09:43:25.468 +00:00 [INF] Executed endpoint 'HTTP: GET /'
2025-01-23 09:43:25.468 +00:00 [INF] Request finished HTTP/1.1 GET http://localhost:9998/ - 200 null text/plain; charset=utf-8 3.639ms
2025-01-23 09:53:52.533 +00:00 [WRN] Overriding HTTP_PORTS '8080' and HTTPS_PORTS ''. Binding to values defined by URLS instead '"https://+:9999;http://+:9998"'.
2025-01-23 09:53:52.650 +00:00 [WRN] The WebRootPath was not found: /app/wwwroot. Static files may be unavailable.
2025-01-23 09:53:52.658 +00:00 [WRN] Overriding address(es) '"https://+:9999, http://+:9998"'. Binding to endpoints defined via IConfiguration and/or UseKestrel() instead.
2025-01-23 09:53:52.918 +00:00 [INF] Now listening on: http://0.0.0.0:8080
2025-01-23 09:53:52.920 +00:00 [INF] Now listening on: https://0.0.0.0:8081
2025-01-23 09:53:52.921 +00:00 [INF] Application started. Press Ctrl+C to shut down.
2025-01-23 09:53:52.922 +00:00 [INF] Hosting environment: Production
2025-01-23 09:53:52.922 +00:00 [INF] Content root path: /app
2025-01-23 09:54:09.045 +00:00 [INF] Request starting HTTP/1.1 POST https://localhost:9999/products - application/json 270
2025-01-23 09:54:09.168 +00:00 [INF] Executing endpoint 'HTTP: POST /products'
2025-01-23 09:54:09.296 +00:00 [INF] CreateProduct start.Handle called with {"Name":"Poduct nothing","Category":["h1","h2"],"Description":" this test product from hello","ImageFile":"Hello.png","Price":9999,"$type":"CreateProductCommand"}
2025-01-23 09:54:13.323 +00:00 [INF] Start
2025-01-23 09:54:17.531 +00:00 [INF] Batch execution completed (duration=49ms): ["\nSELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-23 09:54:17.628 +00:00 [INF] Batch execution completed (duration=74ms): ["\nselect column_name, data_type, character_maximum_length, udt_name\nfrom information_schema.columns where table_schema = $1 and table_name = $2\norder by ordinal_position","select kcu.column_name as key_column\nfrom information_schema.table_constraints tco\n         join information_schema.key_column_usage kcu\n              on kcu.constraint_name = tco.constraint_name\n                  and kcu.constraint_schema = tco.constraint_schema\n                  and kcu.constraint_name = tco.constraint_name\nwhere tco.constraint_type = 'PRIMARY KEY' and kcu.table_schema = $1 and kcu.table_name = $2\norder by kcu.ordinal_position","SELECT *\nFROM (\n    SELECT\n      R.rolname                AS user_name,\n      ns.nspname               AS schema_name,\n      pg_catalog.textin(pg_catalog.regclassout(idx.indrelid :: REGCLASS)) AS table_name,\n      i.relname                AS index_name,\n      pg_get_indexdef(i.oid) as ddl,\n      idx.indisunique          AS is_unique,\n      idx.indisprimary         AS is_primary,\n      am.amname                AS index_type,\n      idx.indkey,\n           ARRAY(\n               SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)\n               FROM\n                 generate_subscripts(idx.indkey, 1) AS k\n               ORDER BY k\n           ) AS index_keys,\n      (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional,\n      idx.indpred IS NOT NULL AS is_partial\n    FROM pg_index AS idx\n      JOIN pg_class AS i\n        ON i.oid = idx.indexrelid\n      JOIN pg_am AS am\n        ON i.relam = am.oid\n      JOIN pg_namespace AS NS ON i.relnamespace = NS.OID\n      JOIN pg_roles AS R ON i.relowner = r.oid\n    WHERE\n      nspname = $1 AND\n      NOT nspname LIKE 'pg%'\n) ind\nWHERE\n      ind.table_name = $2 OR\n      ind.table_name = $3","SELECT c.conname                                     AS constraint_name,\n       c.contype                                     AS constraint_type,\n       sch.nspname                                   AS schema_name,\n       tbl.relname                                   AS table_name,\n       ARRAY_AGG(col.attname ORDER BY u.attposition) AS columns,\n       pg_get_constraintdef(c.oid)                   AS definition\nFROM pg_constraint c\n       JOIN LATERAL UNNEST(c.conkey) WITH ORDINALITY AS u(attnum, attposition) ON TRUE\n       JOIN pg_class tbl ON tbl.oid = c.conrelid\n       JOIN pg_namespace sch ON sch.oid = tbl.relnamespace\n       JOIN pg_attribute col ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)\nWHERE\n\tc.contype = 'f' and\n\tsch.nspname = $1 and\n\ttbl.relname = $2\nGROUP BY constraint_name, constraint_type, schema_name, table_name, definition","SHOW max_identifier_length","select\n    col.column_name,\n    partition_strategy\nfrom\n    (select\n         partrelid,\n         partnatts,\n         case partstrat\n             when 'l' then 'list'\n             when 'h' then 'hash'\n             when 'r' then 'range' end as partition_strategy,\n         unnest(partattrs) column_index\n     from\n         pg_partitioned_table) pt\n        join\n    pg_class par\n    on\n            par.oid = pt.partrelid\n        join\n    information_schema.columns col\n    on\n                col.table_schema = par.relnamespace::regnamespace::text\n            and col.table_name = par.relname\n            and ordinal_position = pt.column_index\nwhere\n    col.table_schema = $1 and table_name = $2\norder by column_index","select pt.relname as partition_name,\n          pg_get_expr(pt.relpartbound, pt.oid, true) as partition_expression\n   from pg_class base_tb\n            join pg_inherits i on i.inhparent = base_tb.oid\n            join pg_class pt on pt.oid = i.inhrelid\n   where base_tb.relname = $1 and base_tb.relnamespace = $2::regnamespace::oid","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2","SELECT pg_get_functiondef(pg_proc.oid)\nFROM pg_proc JOIN pg_namespace as ns ON pg_proc.pronamespace = ns.oid WHERE ns.nspname = $1 and proname = $2","SELECT format('DROP FUNCTION IF EXISTS %s.%s(%s);'\n             ,n.nspname\n             ,p.proname\n             ,pg_get_function_identity_arguments(p.oid))\nFROM   pg_proc p\nLEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\nWHERE  p.proname = $1\nAND    n.nspname = $2"]
2025-01-23 09:54:17.803 +00:00 [INF] Command execution completed (duration=61ms): select public.mt_upsert_product($1,$2,$3,$4)
2025-01-23 09:54:17.817 +00:00 [INF] ENd {"Id":"01949295-7a25-4f59-8d93-89edafd0438a","Name":"Poduct nothing","Category":["h1","h2"],"Description":" this test product from hello","ImageFile":"Hello.png","Price":9999,"$type":"Product"}
2025-01-23 09:54:17.819 +00:00 [INF] CreateProduct end.Handle called with {"Id":"01949295-7a25-4f59-8d93-89edafd0438a","$type":"CreateProductResult"}
2025-01-23 09:54:17.825 +00:00 [INF] Setting HTTP status code 201.
2025-01-23 09:54:17.832 +00:00 [INF] Writing value of type 'CreateProductResponse' as Json.
2025-01-23 09:54:17.852 +00:00 [INF] Executed endpoint 'HTTP: POST /products'
2025-01-23 09:54:17.859 +00:00 [INF] Request finished HTTP/1.1 POST https://localhost:9999/products - 201 null application/json; charset=utf-8 8420.3645ms
